<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="EnvDTE80" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<# 
    const string GET_SET = "{ get; set; }";

    var templateName = Path.GetFileName(Host.TemplateFile);
    var templateNameWithoutExtension = Path.GetFileNameWithoutExtension(Host.TemplateFile);
    var hostServiceProvider = (IServiceProvider)Host;
    var dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
    var templateFileItem = dte.Solution.FindProjectItem(Host.TemplateFile);
    var dteProject = (EnvDTE.Project)templateFileItem.ContainingProject; 
    var defaultNamespace = dteProject.Properties.Item("DefaultNamespace").Value;
    var templateDir = Path.GetDirectoryName(Host.TemplateFile);
    var fullPath = dteProject.Properties.Item("FullPath").Value.ToString();

    fullPath = fullPath.EndsWith("\\") ? fullPath.Substring(0, fullPath.Length-1) : fullPath;
    
    var subNamespace = templateDir.Replace(fullPath, string.Empty).Replace("\\", ".");
    var fileNamespace = string.Concat(defaultNamespace, subNamespace);
 #>
//------------------------------------------------------------------------------
// <auto-generated>
//  Last update:  <#= DateTime.Now.ToString("f") #>
//  T4 template:  <#= templateName #>
// </auto-generated>
//------------------------------------------------------------------------------

namespace <#= fileNamespace #>
{
    public static class <#= templateNameWithoutExtension #>
    {
<# 
        var controllers = GetControllers((EnvDTE80.DTE2)dte, "TenderSearch.Web");

        PushIndent("    ");
        PushIndent("    ");
        controllers.ForEach(r =>WriteLine($"public const string {r} = \"{r}\";"));
        PopIndent();
        PopIndent();
#>
    }
}
<#+
    public static List<Project> Projects(DTE2 dte)
    {
        Projects projects = dte.Solution.Projects;
        List<Project> list = new List<Project>();

        var item = projects.GetEnumerator();

        while (item.MoveNext())
        {
            var project = item.Current as Project;

            if (project == null)
            {
                continue;
            }

            if (project.Kind == ProjectKinds.vsProjectKindSolutionFolder)
            {
                list.AddRange(Projects(project));
            }
            else
            {
                list.Add(project);
            }
        }

        return list;
    }

    private static IEnumerable<Project> Projects( Project project)
    {
        List<Project> list = new List<Project>();

        for (var i = 1; i <= project.ProjectItems.Count; i++)
        {
            var solutionFolderProject = project.ProjectItems.Item(i).SubProject;

            if (solutionFolderProject == null)
            {
                continue;
            }

            // If this is another solution folder, do a recursive call, otherwise add
            if (solutionFolderProject.Kind == ProjectKinds.vsProjectKindSolutionFolder)
            {
                list.AddRange(Projects(solutionFolderProject));
            }
            else
            {
                list.Add(solutionFolderProject);
            }
        }

        return list;
    }

    public static Project GetProject(DTE2 dte, string projectNameEndsWith)
    {
        return Projects(dte).Where(x => x.Name.EndsWith(projectNameEndsWith)).FirstOrDefault();
    }

    public static List<string> GetControllers(DTE2 dte, string projectNameEndsWith)
    {
        var projectWithControllers = GetProject(dte, projectNameEndsWith);
        var controllers = Classes(projectWithControllers, c => c.FullName.Contains(".Controllers") && !c.FullName.Contains(".BaseClasses"))
            .Where(c => !c.EndsWith("Base") && !c.EndsWith("Enums"))
            .Distinct()
            .Select(c => c.Replace("Controller", string.Empty))
            .ToList();

        return controllers;
    }

    public static List<string> Classes(Project project, Func<CodeNamespace, bool> whereClause)
    {
        var projectItems = Classes(project)
            .Where(c => c.FileCodeModel != null)
            .Where(c => c.FileCodeModel.CodeElements.Cast<CodeElement>().OfType<CodeNamespace>().FirstOrDefault() != null)
            .Where(c => whereClause(c.FileCodeModel.CodeElements.Cast<CodeElement>().OfType<CodeNamespace>().First()))
            .Select(c => System.IO.Path.GetFileNameWithoutExtension(c.Name))
            .ToList();

        return projectItems;
    }

    public static List<ProjectItem> Classes(Project project)
    {
        var allProjectItems = AllProjectItems(project.ProjectItems);
        var projectItems = allProjectItems.Where(c => c.Name.EndsWith(".cs"));

        return projectItems.ToList();
    }
    
    public static IEnumerable<ProjectItem> AllProjectItems(ProjectItems projectItems)
    {
        foreach (ProjectItem item in projectItems)
        {
            yield return item;

            if (item.SubProject != null)
            {
                foreach (ProjectItem childItem in AllProjectItems(item.SubProject.ProjectItems))
                    yield return childItem;
            }
            else
            {
                foreach (ProjectItem childItem in AllProjectItems(item.ProjectItems))
                    yield return childItem;
            }
        }
    }
#>