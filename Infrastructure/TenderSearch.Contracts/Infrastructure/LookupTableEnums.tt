<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Configuration" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//  Date updated:  <#= DateTime.Now.ToString("f") #>
//  Template:  <#= Path.GetFileName(Host.TemplateFile) #>
//  How to trigger: Goto Properties -> Custom Tool -> rename from TextTemplatingFileGeneratorr to TextTemplatingFileGenerator
//  How to disable: Rename from TextTemplatingFileGenerator back to TextTemplatingFileGeneratorr
// </auto-generated>
//------------------------------------------------------------------------------
<#
    BuildEnum();
#>
<#+
    public class Lookup 
    {
        public string Group { get; set; }
        public string SubGroup { get; set; }
        public int Value { get; set; }
        public string Text { get; set; }
    }

    private void BuildEnum()
    {
        const string QOUTE = "\"";

	    var table = "Lookups";
	    var mainDbConnectionString = GetConnString();

	    using (var conn = new SqlConnection(mainDbConnectionString))
        {
            var cmd = conn.CreateCommand();

            cmd.CommandText = $"SELECT [Group],[SubGroup],[Value],[Text] FROM {table} ORDER BY [Group],[SubGroup],[Value],[Text]";
            cmd.CommandType = System.Data.CommandType.Text;
            conn.Open();

            var lookup = new List<Lookup>();
            var row = cmd.ExecuteReader();
    
            while (row.Read()) {

                var currentGroup = CreateValidIdentifier(row["Group"].ToString());
                var currentSubGroup = CreateValidIdentifier(row["SubGroup"].ToString());
                var currentText = CreateValidIdentifier(row["Text"].ToString());
                var currentValue = CreateValidIdentifier(row["Value"].ToString());

                lookup.Add(new Lookup
                {
                        Group = currentGroup,
                        SubGroup = currentSubGroup,
                        Value =int.Parse(currentValue),
                        Text = currentText
                });
            }

            row.Close();
            conn.Close();

            var mainGroup = lookup.Select(g => g.Group).Distinct()
                .ToList()
                .ConvertAll(g => {

                    var groupName = CreateValidIdentifier(g);

                    return $"\tpublic const string {groupName} = {QOUTE}{g}{QOUTE};";
                });

            var subGroup = lookup.Where(g => !string.IsNullOrWhiteSpace(g.SubGroup)).Select(g => g.SubGroup).Distinct()
                .ToList()
                .ConvertAll(g => {

                    var subgroupName = CreateValidIdentifier(g);

                    return $"\tpublic const string {subgroupName} = {QOUTE}{g}{QOUTE};";
                });

            var propertyGroups = string.Join($"{Environment.NewLine}", mainGroup.ToArray());
            var propertySubGroups = string.Join($"{Environment.NewLine}", subGroup.ToArray());

            WriteLine("namespace TenderSearch.Web.Infrastructure");
            WriteLine("{");
            PushIndent("\t");
            WriteLine($"public static class LookupGroups");
            WriteLine("{"); 
            WriteLine(propertyGroups);
            WriteLine("}");

            if (subGroup.Any()){
                WriteLine(""); 
                WriteLine($"public static class LookupSubGroups");
                WriteLine("{"); 
                WriteLine(propertySubGroups);
                WriteLine("}");
            }

            var enums = lookup.Select(g => g.Group).Distinct().ToList();

            enums.ForEach(g => {
                var propertiesToEnumerate = lookup.Where(r => r.Group == g)
                    .OrderBy(r => r.Value).ToList()
                    .ConvertAll(p => {
                        
                        if(string.IsNullOrWhiteSpace(p.SubGroup)) return $"    {CreateValidIdentifier(p.Text)} = {p.Value}";
                        return $"    {CreateValidIdentifier(p.Text)}{CreateValidIdentifier(p.SubGroup)} = {p.Value}";
                    });

                var propertyEnums = string.Join($",{Environment.NewLine}", propertiesToEnumerate.ToArray());

                WriteLine(""); 
                WriteLine($"public enum e{CreateValidIdentifier(g)}");
                WriteLine("{");
                WriteLine(propertyEnums);
                WriteLine("}");
            });                 

            PopIndent();

            WriteLine("}");
        }
	}

    private string CreateValidIdentifier(string input)
	{
		var pattern = @"[\.\[\]\s\\\/\-]";
		var regex = new Regex(pattern, RegexOptions.None);
            
		return regex.Replace(input, "");
	}

    private string GetConnString()
    {
        var configurationFileMap = new ExeConfigurationFileMap();
        var templateDir = new DirectoryInfo(Path.GetDirectoryName(Host.TemplateFile)).Parent.FullName;

        templateDir = templateDir.Replace("Infrastructure\\TenderSearch.Contracts", "Hosts\\TenderSearch.Web");
        configurationFileMap.ExeConfigFilename = Host.ResolvePath(Path.Combine(templateDir,"Web.config"));

        var configuration = ConfigurationManager.OpenMappedExeConfiguration(configurationFileMap, ConfigurationUserLevel.None);
        var key ="MainDbConnectionString";
        var mainDbConnectionString = configuration.ConnectionStrings.ConnectionStrings[key].ToString();

        return mainDbConnectionString;
    }
#>